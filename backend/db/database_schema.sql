
-- MySQL Event Management System Database Schema

-- Create USER table
CREATE TABLE USER (
    userID INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    phoneNumber VARCHAR(20),
    address TEXT,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create LOGIN table
CREATE TABLE LOGIN (
    loginID INT AUTO_INCREMENT PRIMARY KEY,
    userID INT NOT NULL,
    loginTime DATETIME NOT NULL,
    logoutTime DATETIME,
    FOREIGN KEY (userID) REFERENCES USER(userID) ON DELETE CASCADE
);

-- Create ADMIN table
CREATE TABLE ADMIN (
    adminID INT AUTO_INCREMENT PRIMARY KEY,
    userID INT NOT NULL,
    FOREIGN KEY (userID) REFERENCES USER(userID) ON DELETE CASCADE
);

-- Create ATTENDEE table
CREATE TABLE ATTENDEE (
    attendeeID INT AUTO_INCREMENT PRIMARY KEY,
    userID INT NOT NULL,
    FOREIGN KEY (userID) REFERENCES USER(userID) ON DELETE CASCADE
);

-- Create ORGANIZER table
CREATE TABLE ORGANIZER (
    organizerID INT AUTO_INCREMENT PRIMARY KEY,
    userID INT NOT NULL,
    contactInfo TEXT,
    FOREIGN KEY (userID) REFERENCES USER(userID) ON DELETE CASCADE
);

-- Create EVENT table
CREATE TABLE EVENT (
    eventID INT AUTO_INCREMENT PRIMARY KEY,
    organizerID INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    date DATE NOT NULL,
    location VARCHAR(255) NOT NULL,
    description TEXT,
    maxAttendees INT NOT NULL DEFAULT 100,
    eventStatus ENUM('upcoming', 'ongoing', 'completed', 'cancelled') NOT NULL DEFAULT 'upcoming',
    image VARCHAR(255),
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (organizerID) REFERENCES ORGANIZER(organizerID) ON DELETE CASCADE
);

-- Create REGISTRATION table
CREATE TABLE REGISTRATION (
    registrationID INT AUTO_INCREMENT PRIMARY KEY,
    attendeeID INT NOT NULL,
    eventID INT NOT NULL,
    registerDate DATE NOT NULL,
    FOREIGN KEY (attendeeID) REFERENCES ATTENDEE(attendeeID) ON DELETE CASCADE,
    FOREIGN KEY (eventID) REFERENCES EVENT(eventID) ON DELETE CASCADE
);

-- Create TICKET table
CREATE TABLE TICKET (
    ticketID INT AUTO_INCREMENT PRIMARY KEY,
    attendeeID INT NOT NULL,
    eventID INT NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    purchaseDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (attendeeID) REFERENCES ATTENDEE(attendeeID) ON DELETE CASCADE,
    FOREIGN KEY (eventID) REFERENCES EVENT(eventID) ON DELETE CASCADE
);

-- Create PAYMENT table
CREATE TABLE PAYMENT (
    paymentID INT AUTO_INCREMENT PRIMARY KEY,
    ticketID INT NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    paymentDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    paymentStatus ENUM('pending', 'completed', 'failed') NOT NULL DEFAULT 'pending',
    FOREIGN KEY (ticketID) REFERENCES TICKET(ticketID) ON DELETE CASCADE
);

-- Create FEEDBACK table
CREATE TABLE FEEDBACK (
    feedbackID INT AUTO_INCREMENT PRIMARY KEY,
    userID INT NOT NULL,
    eventID INT NOT NULL,
    rating INT NOT NULL CHECK (rating BETWEEN 1 AND 5),
    comment TEXT,
    submittedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (userID) REFERENCES USER(userID) ON DELETE CASCADE,
    FOREIGN KEY (eventID) REFERENCES EVENT(eventID) ON DELETE CASCADE
);

-- Create EMPLOYEEDETAILS table
CREATE TABLE EMPLOYEEDETAILS (
    employeeID INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    role VARCHAR(100) NOT NULL,
    salary DECIMAL(10, 2) NOT NULL,
    hireDate DATE NOT NULL DEFAULT (CURRENT_DATE)
);

-- Create ASSIGNEVENT table
CREATE TABLE ASSIGNEVENT (
    assignID INT AUTO_INCREMENT PRIMARY KEY,
    employeeID INT NOT NULL,
    eventID INT NOT NULL,
    role VARCHAR(100) NOT NULL,
    assignDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (employeeID) REFERENCES EMPLOYEEDETAILS(employeeID) ON DELETE CASCADE,
    FOREIGN KEY (eventID) REFERENCES EVENT(eventID) ON DELETE CASCADE
);

-- Create NOTIFICATION table
CREATE TABLE NOTIFICATION (
    notificationID INT AUTO_INCREMENT PRIMARY KEY,
    eventID INT,
    userID INT,
    message TEXT NOT NULL,
    isRead BOOLEAN NOT NULL DEFAULT FALSE,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (eventID) REFERENCES EVENT(eventID) ON DELETE CASCADE,
    FOREIGN KEY (userID) REFERENCES USER(userID) ON DELETE CASCADE
);

-- Add indexes to improve query performance
CREATE INDEX idx_event_status ON EVENT(eventStatus);
CREATE INDEX idx_event_date ON EVENT(date);
CREATE INDEX idx_registration_event ON REGISTRATION(eventID);
CREATE INDEX idx_feedback_event ON FEEDBACK(eventID);
CREATE INDEX idx_assign_event ON ASSIGNEVENT(eventID);
